### 특정 데이터를 찾을 때

---

- 배열을 사용한다고 하면 특정 값을 찾을 때 배열의 길이가 많다면 엄청나게 오래 걸림. → 처음부터 아래로 내려가며 하나하나 찾기 때문.
- 그 문제를 해결하고자 **해시 함수**라는 것을 사용함.
- **해시 함수**는 찾을 데이터가 대강 어디에 있을지 예측하고 그 예측 값부터 찾기 시작하도록 구현함.

### HashSet

---

- set `인터페이스`에서 지원하는 구현 클래스임.
    
    <aside>
    ⭐ **인터페이스 = 구현 되어있지 않고 정의만 되어 있는 것!**
    
    </aside>
    
- 순서대로 입력되지 않고, 일정하게 유지되지 않음.
- null 요소도 허용됨.
- ⭐ 중복을 허용하지 않음. (hashset의 매력적인 부분임.)

---

- 중복을 걸러내는 과정
    1. 객체를 저장하기 전에 먼저 객체의 hashCode() 메소드를 호출해서 해시 코드를 얻어 냄
    2. 저장되어 있는 객체들의 해시 코드와 비교한 뒤
    3. 같은 해시 코드가 있다면 다시 equals() 메소드로 두 객체를 비교해서 true가 나오면 동일한 객체로 판단하고 중복 저장을 하지 않음.
    
    <aside>
    💡 이 때 비교하는 것은 문자열의 주소 값이 아닌 문자열 자체의 값을 비교하는 것임. (==으로 비교해도 됨.)
    
    </aside>
선언 : HashSet<클래스> 변수명 = new HashSet<클래스>();


